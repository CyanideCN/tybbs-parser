import datetime
from typing import Optional, Union
from os.path import exists, join

import docx
from docx import Document
from docx.shared import RGBColor
from docx.shared import Pt, Cm
from docx.oxml.ns import qn
from bs4.element import NavigableString

from container import Floor
from log import logger
from scrape import find_tid, INSERT_PIC

# TODO: Support styles
# TODO: Automatically determine where to start collection

VERSION = '0.0.3'

class DocxWriter(object):
    
    def __init__(self, url:str, folder:str='', filename=None):
        # process url and id
        self.url = url
        self.tid = find_tid(url)
        
        if filename:
            self.docx = Document(join(folder, fn))
            self._need_title = False
        else:
            self.docx = self._init_docx()
            self._header()
            self._need_title = True

    def _init_docx(self) -> docx.document.Document:
        d = Document()
        style = d.styles['Normal']
        style.font.name = u'等线'
        style.element.rPr.rFonts.set(qn('w:eastAsia'), u'等线')
        return d

    def _header(self):
        p = self.docx.add_paragraph()
        hd = p.add_run('Generated by Tybbs-parser @HCl\nUrl: {}\
                        \nVersion: {} Time: {}'.format(self.url, VERSION, datetime.datetime.now()))
        hd.font.name = 'Arial'
        hd.font.size = Pt(8)
        hd.font.color.rgb = RGBColor(105, 105, 105)

    def add_title(self, title:str):
        if isinstance(title, (str, NavigableString)):
            p = self.docx.add_paragraph()
            tit = p.add_run(title)
            tit.style.font.color.rgb = RGBColor(255, 0, 0)
            tit.bold = True
            tit.font.size = Pt(15)
            self._need_title = False
            self._title = title

    def add_floor(self, floor:Floor):
        if self._need_title:
            self.add_title(floor.floor_info['title'])
        pic_count = 0
        pic_bin = floor.download_pic()
        # Floor information
        p = self.docx.add_paragraph()
        p.add_run('\n')
        floor_annot = p.add_run('#{} {} {}'.format(floor.serial, floor.user, floor.time.strftime('%Y-%m-%d %H:%M')))
        floor_annot.style.font.color.rgb = RGBColor(255, 0, 0)
        floor_annot.bold = True
        floor_annot.font.size = Pt(10)
        # Content
        if floor.floor_info['quote']:
            qt = floor.floor_info['quote']
            p = self.docx.add_paragraph()
            ctt = p.add_run('{}: {}'.format(qt[0], qt[1]))
            ctt.font.color.rgb = RGBColor(125, 125, 125)
            ctt.font.size = Pt(10)
            ctt.italic = True
        for ct in floor.content:
            if ct == INSERT_PIC:
                try:
                    self.docx.add_picture(pic_bin[pic_count], width=Cm(19))
                except Exception:
                    print('Error occurred in adding picture')
                pic_count += 1
            else:
                p = self.docx.add_paragraph()
                ctt = p.add_run(ct)
                ctt.font.size = Pt(10)

    def save(self):
        path = '_'.join([str(self.tid), self._title]) + '.docx'
        path = path.replace(':', '')
        self.docx.save(path)