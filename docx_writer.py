import datetime
from typing import Optional, Union
from os.path import exists, join

import docx
from docx import Document
from docx.shared import RGBColor
from docx.shared import Pt
from docx.oxml.ns import qn

from container import Floor
from log import logger
from scrape import find_tid, INSERT_PIC

# TODO: Support styles
# TODO: Automatically determine where to start collection

VERSION = '0.0.2'

class DocxWriter(object):
    
    def __init__(self, url:str, folder:str=''):
        # process url and id
        self.url = url
        self.tid = find_tid(url)
        fn = self._gen_filename()
        if not exists(join(folder, fn)):
            self.docx = self._init_docx()
            self._header()
        else:
            # Document already exists
            self.docx = Document(join(folder, fn))

    def _init_docx(self) -> docx.document.Document:
        d = Document()
        style = d.styles['Normal']
        style.font.name = u'等线'
        style.element.rPr.rFonts.set(qn('w:eastAsia'), u'等线')
        return d

    def _header(self):
        p = self.docx.add_paragraph()
        p.style.font.size = Pt(6)
        hd = p.add_run('Generated by Tybbs-parser @HCl\nUrl: {}\n\
                        Version: {} Time: {}'.format(self.url, VERSION, datetime.datetime.now()))
        hd.font.name = 'Arial'
        hd.font.color.rgb = RGBColor(105, 105, 105)

    def add_title(self, *args):
        pass

    def add_floor(self, floor:Floor):
        PIC_SERIAL = 0
        pic_bin = floor.download_pic()
        # Floor information
        p = self.docx.add_paragraph()
        p.style.font.size = Pt(12)
        floor_annot = p.add_run('#{} {} {}'.format(floor.serial, floor.user, floor.time.strftime('%Y-%m-%d %H:%M')))
        floor_annot.style.font.color.rgb = RGBColor(255, 0, 0)
        floor_annot.bold = True
        # Content
        for ct in floor.content:
            if ct == INSERT_PIC:
                self.docx.add_picture(pic_bin[PIC_SERIAL])
                PIC_SERIAL += 1
            else:
                p = self.docx.add_paragraph()
                p.style.font.size = Pt(10)
                ctt = p.add_run(ct)
        # Finalize

    def _gen_filename(self):
        '''Generate default filename'''
        return '{}.docx'.format(self.tid)

    def save(self):
        path = self._gen_filename()
        self.docx.save(path)